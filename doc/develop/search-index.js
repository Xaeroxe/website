var searchIndex = {};
searchIndex["amethyst"] = {"doc":"Amethyst is a free and open source game engine written in idiomatic [Rust][rs] for building video games and interactive multimedia applications. The source code is available for download on [GitHub][gh]. See the [online book][bk] for a complete guide to using Amethyst.","items":[[4,"Event","amethyst","",null,null],[13,"Resized","","The size of the window has changed.",0,null],[13,"Moved","","The position of the window has changed.",0,null],[13,"Closed","","The window has been closed.",0,null],[13,"DroppedFile","","A file has been dropped into the window.",0,null],[13,"ReceivedCharacter","","The window received a unicode character.",0,null],[13,"Focused","","The window gained or lost focus.",0,null],[13,"KeyboardInput","","An event from the keyboard has been received.",0,null],[13,"MouseMoved","","The cursor has moved on the window.",0,null],[13,"MouseEntered","","The cursor has entered the window.",0,null],[13,"MouseLeft","","The cursor has left the window.",0,null],[13,"MouseWheel","","A mouse wheel movement or touchpad scroll occurred.",0,null],[13,"MouseInput","","An event from the mouse has been received.",0,null],[13,"TouchpadPressure","","Touchpad pressure event.",0,null],[13,"Awakened","","The event loop was woken up by another thread.",0,null],[13,"Refresh","","The window needs to be redrawn.",0,null],[13,"Suspended","","App has been suspended or resumed.",0,null],[13,"Touch","","Touch event has been received",0,null],[4,"ElementState","","",null,null],[13,"Pressed","","",1,null],[13,"Released","","",1,null],[6,"ScanCode","","",null,null],[4,"VirtualKeyCode","","",null,null],[13,"Key1","","The '1' key over the letters.",2,null],[13,"Key2","","The '2' key over the letters.",2,null],[13,"Key3","","The '3' key over the letters.",2,null],[13,"Key4","","The '4' key over the letters.",2,null],[13,"Key5","","The '5' key over the letters.",2,null],[13,"Key6","","The '6' key over the letters.",2,null],[13,"Key7","","The '7' key over the letters.",2,null],[13,"Key8","","The '8' key over the letters.",2,null],[13,"Key9","","The '9' key over the letters.",2,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",2,null],[13,"A","","",2,null],[13,"B","","",2,null],[13,"C","","",2,null],[13,"D","","",2,null],[13,"E","","",2,null],[13,"F","","",2,null],[13,"G","","",2,null],[13,"H","","",2,null],[13,"I","","",2,null],[13,"J","","",2,null],[13,"K","","",2,null],[13,"L","","",2,null],[13,"M","","",2,null],[13,"N","","",2,null],[13,"O","","",2,null],[13,"P","","",2,null],[13,"Q","","",2,null],[13,"R","","",2,null],[13,"S","","",2,null],[13,"T","","",2,null],[13,"U","","",2,null],[13,"V","","",2,null],[13,"W","","",2,null],[13,"X","","",2,null],[13,"Y","","",2,null],[13,"Z","","",2,null],[13,"Escape","","The Escape key, next to F1.",2,null],[13,"F1","","",2,null],[13,"F2","","",2,null],[13,"F3","","",2,null],[13,"F4","","",2,null],[13,"F5","","",2,null],[13,"F6","","",2,null],[13,"F7","","",2,null],[13,"F8","","",2,null],[13,"F9","","",2,null],[13,"F10","","",2,null],[13,"F11","","",2,null],[13,"F12","","",2,null],[13,"F13","","",2,null],[13,"F14","","",2,null],[13,"F15","","",2,null],[13,"Snapshot","","Print Screen/SysRq.",2,null],[13,"Scroll","","Scroll Lock.",2,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",2,null],[13,"Insert","","`Insert`, next to Backspace.",2,null],[13,"Home","","",2,null],[13,"Delete","","",2,null],[13,"End","","",2,null],[13,"PageDown","","",2,null],[13,"PageUp","","",2,null],[13,"Left","","",2,null],[13,"Up","","",2,null],[13,"Right","","",2,null],[13,"Down","","",2,null],[13,"Back","","The Backspace key, right over Enter.",2,null],[13,"Return","","The Enter key.",2,null],[13,"Space","","The space bar.",2,null],[13,"Compose","","The \"Compose\" key on Linux.",2,null],[13,"Numlock","","",2,null],[13,"Numpad0","","",2,null],[13,"Numpad1","","",2,null],[13,"Numpad2","","",2,null],[13,"Numpad3","","",2,null],[13,"Numpad4","","",2,null],[13,"Numpad5","","",2,null],[13,"Numpad6","","",2,null],[13,"Numpad7","","",2,null],[13,"Numpad8","","",2,null],[13,"Numpad9","","",2,null],[13,"AbntC1","","",2,null],[13,"AbntC2","","",2,null],[13,"Add","","",2,null],[13,"Apostrophe","","",2,null],[13,"Apps","","",2,null],[13,"At","","",2,null],[13,"Ax","","",2,null],[13,"Backslash","","",2,null],[13,"Calculator","","",2,null],[13,"Capital","","",2,null],[13,"Colon","","",2,null],[13,"Comma","","",2,null],[13,"Convert","","",2,null],[13,"Decimal","","",2,null],[13,"Divide","","",2,null],[13,"Equals","","",2,null],[13,"Grave","","",2,null],[13,"Kana","","",2,null],[13,"Kanji","","",2,null],[13,"LAlt","","",2,null],[13,"LBracket","","",2,null],[13,"LControl","","",2,null],[13,"LMenu","","",2,null],[13,"LShift","","",2,null],[13,"LWin","","",2,null],[13,"Mail","","",2,null],[13,"MediaSelect","","",2,null],[13,"MediaStop","","",2,null],[13,"Minus","","",2,null],[13,"Multiply","","",2,null],[13,"Mute","","",2,null],[13,"MyComputer","","",2,null],[13,"NavigateForward","","",2,null],[13,"NavigateBackward","","",2,null],[13,"NextTrack","","",2,null],[13,"NoConvert","","",2,null],[13,"NumpadComma","","",2,null],[13,"NumpadEnter","","",2,null],[13,"NumpadEquals","","",2,null],[13,"OEM102","","",2,null],[13,"Period","","",2,null],[13,"PlayPause","","",2,null],[13,"Power","","",2,null],[13,"PrevTrack","","",2,null],[13,"RAlt","","",2,null],[13,"RBracket","","",2,null],[13,"RControl","","",2,null],[13,"RMenu","","",2,null],[13,"RShift","","",2,null],[13,"RWin","","",2,null],[13,"Semicolon","","",2,null],[13,"Slash","","",2,null],[13,"Sleep","","",2,null],[13,"Stop","","",2,null],[13,"Subtract","","",2,null],[13,"Sysrq","","",2,null],[13,"Tab","","",2,null],[13,"Underline","","",2,null],[13,"Unlabeled","","",2,null],[13,"VolumeDown","","",2,null],[13,"VolumeUp","","",2,null],[13,"Wake","","",2,null],[13,"WebBack","","",2,null],[13,"WebFavorites","","",2,null],[13,"WebForward","","",2,null],[13,"WebHome","","",2,null],[13,"WebRefresh","","",2,null],[13,"WebSearch","","",2,null],[13,"WebStop","","",2,null],[13,"Yen","","",2,null],[4,"MouseScrollDelta","","",null,null],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal and vertical directions.",3,null],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and vertical direction.",3,null],[4,"TouchPhase","","",null,null],[13,"Started","","",4,null],[13,"Moved","","",4,null],[13,"Ended","","",4,null],[13,"Cancelled","","",4,null],[4,"MouseButton","","",null,null],[13,"Left","","",5,null],[13,"Right","","",5,null],[13,"Middle","","",5,null],[13,"Other","","",5,null],[3,"Touch","","Represents touch event",null,null],[12,"phase","","",6,null],[12,"location","","",6,null],[12,"id","","unique identifier of a finger.",6,null],[3,"Application","","User-friendly facade for building games. Manages main loop.",null,null],[3,"ApplicationBuilder","","Helper builder for Applications.",null,null],[3,"WindowEvent","","A window-generated event.",null,null],[12,"payload","","Underlying Glutin event type.",7,null],[3,"StateMachine","","A simple stack-based state machine (pushdown automaton).",null,null],[4,"Trans","","Types of state transitions.",null,null],[13,"None","","Continue as normal.",8,null],[13,"Pop","","Remove the active state and resume the next state on the stack or stop if there are none.",8,null],[13,"Push","","Pause the active state and push a new state onto the stack.",8,null],[13,"Switch","","Remove the current state on the stack and insert a different one.",8,null],[13,"Quit","","Stop and remove all states and shut down the engine.",8,null],[4,"Stopwatch","","A stopwatch which accurately measures elapsed time.",null,null],[13,"Waiting","","Initial state with an elapsed time value of 0 seconds.",9,null],[13,"Started","","Stopwatch has started counting the elapsed time since this `Instant` and accumuluated time from previous start/stop cycles `Duration`.",9,null],[13,"Ended","","Stopwatch has been stopped and reports the elapsed time `Duration`.",9,null],[0,"asset_manager","","Asset manager used to load assets (like `Mesh`es and `Texture`s).",null,null],[3,"Asset","amethyst::asset_manager","Generic wrapper around actual asset data.",null,null],[12,"0","","",10,null],[3,"Assets","","Internal assets handler which takes care of storing and loading assets.",null,null],[3,"AssetManager","","Asset manager which handles assets and loaders.",null,null],[3,"DirectoryStore","","Asset store representing a file directory.",null,null],[11,"add_loader","","Add loader resource to the manager",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"get_loader","","Returns stored loader resource",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_loader_mut","","Returns stored loader resource",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"register_asset","","Register a new asset type",11,{"inputs":[{"name":"self"}],"output":null}],[11,"id_from_name","","Retrieve the `AssetId` from the asset name",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"read_assets","","Read the storage of all assets for a certain type",11,{"inputs":[{"name":"self"}],"output":{"name":"gatedstorage"}}],[11,"load_asset_from_data","","Load an asset from data",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"s"}],"output":{"name":"option"}}],[11,"new","","Create a new asset manager",12,{"inputs":[],"output":{"name":"assetmanager"}}],[11,"register_loader","","Register a new loading method for a specific asset data type",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"register_store","","Register an asset store",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"load_asset_from_raw","","Load an asset from raw data # Panics Panics if the asset type isn't registered",12,null],[11,"load_asset","","Load an asset from the asset stores",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[11,"create_renderable","","Create a `Renderable` component from a loaded mesh and ka/kd/ks textures",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"f32"}],"output":{"name":"option"}}],[11,"deref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"assets"}}],[11,"deref_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"assets"}}],[11,"new","","Creates a new asset store from the given directory path.",13,{"inputs":[{"name":"p"}],"output":{"name":"directorystore"}}],[11,"has_asset","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[11,"load_asset","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"vec"}],"output":{"name":"option"}}],[6,"AssetId","","An ID used for directly accessing assets in the manager.",null,null],[8,"AssetLoaderRaw","","Describes a raw asset loader type.",null,null],[10,"from_raw","","TODO: Return a `Result` instead of an `Option`.",14,null],[8,"AssetLoader","","Describes an abstract asset loader type.",null,null],[10,"from_data","","TODO: Return a `Result` instead of an `Option`.",15,{"inputs":[{"name":"assets"},{"name":"self"}],"output":{"name":"option"}}],[8,"AssetStore","","Describes a permanent storage for assets.",null,null],[10,"has_asset","","Returns whether the asset store contains an asset with the given name and type strings.",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"bool"}}],[10,"load_asset","","Loads an asset file with the given name and type into buffer `buf`.",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"vec"}],"output":{"name":"option"}}],[8,"AssetReadStorage","","Describes an asset reader type that can read assets of type `T`.",null,null],[10,"read","","Returns `Some(&T)` given the asset ID, returns `None` if the asset does not exist.",17,{"inputs":[{"name":"self"},{"name":"assetid"}],"output":{"name":"option"}}],[0,"ecs","amethyst","`amethyst` engine built-in types for `specs`.",null,null],[0,"components","amethyst::ecs","Standard library of useful components.",null,null],[3,"Mesh","amethyst::ecs::components","A physical piece of geometry.",null,null],[12,"buffer","","A buffer full of vertices.",18,null],[12,"slice","","A read-only slice of the vertex buffer data.",18,null],[3,"Renderable","","A `Component` that can be attached to an ECS `Entity` to render it onscreen.",null,null],[12,"mesh","","Mesh asset to be renderered.",19,null],[12,"ambient","","Applied during ambient lighting calculations.",19,null],[12,"diffuse","","Applied during diffuse lighting calculations.",19,null],[12,"specular","","Applied during specular lighting calculations.",19,null],[12,"specular_exponent","","Shininess of the object's surface.",19,null],[3,"TextureLoadData","","Loads raw texture data.",null,null],[12,"kind","","Type of storage data being used.",20,null],[12,"raw","","Slice of slices with each inner slice representing an image/texture's pixels laid out contiguously.",20,null],[3,"Child","","Component for defining a parent entity.",null,null],[3,"Init","","Initialization flag. Added to entity with a `LocalTransform` component after the first update.",null,null],[3,"InnerTransform","","Raw transform data.",null,null],[12,"translation","","Translation/position vector [x, y, z]",21,null],[12,"rotation","","Quaternion [w (scalar), x, y, z]",21,null],[12,"scale","","Scale vector [x, y, z]",21,null],[3,"Transform","","Performs a global transformation on the entity (transform from origin).",null,null],[12,"0","","",22,null],[3,"LocalTransform","","Local position, rotation, and scale (from parent if it exists).",null,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"mesh"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"renderable"}}],[11,"new","","Creates a new renderable. You will probably want not use this directly. Instead, use the `AssetManager::create_renderable` function.",19,{"inputs":[{"name":"mesh"},{"name":"texture"},{"name":"texture"},{"name":"texture"},{"name":"f32"}],"output":{"name":"renderable"}}],[11,"from_data","","Panics",20,{"inputs":[{"name":"assets"},{"name":"textureloaddata"}],"output":{"name":"option"}}],[11,"new","","Creates a new child",23,{"inputs":[{"name":"entity"}],"output":{"name":"child"}}],[11,"parent","","Returns our parent entity.",23,{"inputs":[{"name":"self"}],"output":{"name":"entity"}}],[11,"set_parent","","Sets the given entity as our parent.",23,{"inputs":[{"name":"self"},{"name":"entity"}],"output":null}],[11,"flag","","Signals to our parent entity that its child entity has changed.",23,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_dirty","","Returns whether the parent entity has changed.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"init"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"innertransform"}}],[11,"deref_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"innertransform"}}],[11,"flag","","Flags the current transform for re-computation.",25,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_dirty","","Returns whether or not the current transform is flagged for re-computation or \"dirty\".",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matrix","","Returns the local object matrix for the transform.",25,null],[11,"default","","",25,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",22,null],[11,"into","","",22,null],[6,"Texture","","Handle to a texture resource.",null,null],[0,"resources","amethyst::ecs","Resources that can be added to `ecs::World`.",null,null],[3,"Broadcaster","amethyst::ecs::resources","Allows publishing entities",null,null],[3,"Camera","","Represents a camera looking around inside a game world.",null,null],[12,"proj","","Graphical projection of the camera.",26,null],[12,"eye","","Location of the camera in three-dimensional space.",26,null],[12,"target","","The point at which the camera is looking directly at.",26,null],[12,"up","","Upward elevation vector of the camera.",26,null],[3,"InputHandler","","This struct holds state information about input devices.",null,null],[3,"ScreenDimensions","","Abstract representation of a screen.",null,null],[12,"w","","Screen width in pixels (px).",27,null],[12,"h","","Screen height in pixels (px).",27,null],[12,"aspect_ratio","","Width divided by height.",27,null],[3,"Time","","`Time` is added to `ecs::World` as a resource by default. It is updated every frame in `Application::advance_frame`.",null,null],[12,"delta_time","","Time elapsed since the last frame.",28,null],[12,"fixed_step","","Rate at which `State::fixed_update` is called.",28,null],[12,"last_fixed_update","","Time at which `State::fixed_update` was last called.",28,null],[4,"Projection","","Represents the graphical projection of a `Camera`.",null,null],[13,"Perspective","","A realistic [perspective projection][pp].",29,null],[12,"fov","amethyst::ecs::resources::Projection","Field of view, measured in degrees.",29,null],[12,"aspect_ratio","","Aspect ratio of the viewport.",29,null],[12,"near","","Distance of the near clipping plane.",29,null],[12,"far","","Distance of the far clipping plane.",29,null],[13,"Orthographic","amethyst::ecs::resources","An [orthographic projection][op].",29,null],[12,"left","amethyst::ecs::resources::Projection","Distance of the left clipping plane.",29,null],[12,"right","","Distance of the right clipping plane.",29,null],[12,"bottom","","Distance of the bottom clipping plane.",29,null],[12,"top","","Distance of the top clipping plane.",29,null],[12,"near","","Distance of the near clipping plane.",29,null],[12,"far","","Distance of the far clipping plane.",29,null],[11,"clone","amethyst::ecs::resources","",29,{"inputs":[{"name":"self"}],"output":{"name":"projection"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"camera"}}],[11,"new","","Creates a new camera with the projection `proj` and the given eye, target, and up vectors.",26,null],[11,"new","","Creates a new screen dimensions object with the given width and height.",27,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"screendimensions"}}],[11,"update","","Updates the width and height of the screen and recomputes the aspect ratio.",27,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"default","","",30,{"inputs":[],"output":{"name":"inputhandler"}}],[11,"new","","Creates a new input handler.",30,{"inputs":[],"output":{"name":"inputhandler"}}],[11,"update","","Updates the input handler with new engine events.",30,null],[11,"pressed_keys","","Returns an iterator for all the pressed down keys.",30,{"inputs":[{"name":"self"}],"output":{"name":"pressedkeys"}}],[11,"key_down","","Checks if the given key is being pressed.",30,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"keys_down","","Checks if all the given keys are being pressed.",30,null],[11,"key_once","","Checks if the given key is being pressed and held down.",30,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"keys_once","","Checks if the all the given keys are being pressed and held down.",30,null],[11,"pressed_mouse_buttons","","Returns an iterator for all the pressed down mouse buttons.",30,{"inputs":[{"name":"self"}],"output":{"name":"pressedmousebuttons"}}],[11,"mouse_button_down","","Checks if the given mouse button is being pressed.",30,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"mouse_buttons_down","","Checks if all the given mouse buttons are being pressed.",30,null],[11,"mouse_button_once","","Checks if the given mouse button is being pressed and held down.",30,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"mouse_buttons_once","","Checks if the all the given mouse buttons are being pressed and held down.",30,null],[11,"new","","Create new `Broadcaster`",31,{"inputs":[],"output":{"name":"broadcaster"}}],[11,"register","","Add a custom `Component` with which entities can be built and published using `Broadcaster::publish()`",31,{"inputs":[{"name":"self"}],"output":null}],[11,"publish","","Build and publish an entity, using `EntityBuilder` syntax",31,{"inputs":[{"name":"self"}],"output":{"name":"entitybuilder"}}],[11,"read","","Access a component storage",31,{"inputs":[{"name":"self"}],"output":{"name":"gatedstorage"}}],[11,"clean","","Delete all published entities",31,{"inputs":[{"name":"self"}],"output":null}],[0,"systems","amethyst::ecs","Built-in `specs` `System`s.",null,null],[3,"TransformSystem","amethyst::ecs::systems","Handles updating `Transform` components based on the `LocalTransform` component and parents.",null,null],[11,"default","","",32,{"inputs":[],"output":{"name":"transformsystem"}}],[11,"new","","Creates a new transform processor.",32,{"inputs":[],"output":{"name":"transformsystem"}}],[11,"run","","",32,null],[0,"gfx_device","amethyst","Structs and enums holding graphics resources like `gfx::Device`, `gfx::Factory`, `glutin::Window`, etc.)",null,null],[3,"DisplayConfig","amethyst::gfx_device","Graphical display configuration.",null,null],[12,"title","","Name of the application window.",33,null],[12,"fullscreen","","Enables or disables fullscreen mode.",33,null],[12,"dimensions","","Current window dimensions, measured in pixels (px).",33,null],[12,"min_dimensions","","Minimum window dimensions, measured in pixels (px).",33,null],[12,"max_dimensions","","Maximum window dimensions, measured in pixels (px).",33,null],[12,"vsync","","Enables or disables vertical synchronization.",33,null],[12,"multisampling","","Level of MSAA anti-aliasing.",33,null],[12,"visibility","","Sets the visibility of the window.",33,null],[3,"GfxDevice","","Holds all graphics resources required to render a `Scene`/`Pipeline` pair, except `MainTarget`.",null,null],[12,"device","","Handles drawing output to the screen.",34,null],[12,"renderer","","Processes and renders scenes.",34,null],[12,"window","","An application window.",34,null],[3,"MainTarget","","Main render target that gets drawn on the screen.",null,null],[12,"color","","Primary color render target.",35,null],[12,"depth","","Primary depth-stencil render target.",35,null],[5,"video_init","","Create a `(GfxDevice, Factory, MainTarget)` tuple from `DisplayConfig`",null,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"displayconfig"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","TODO: Needs documentation!",33,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"self"}}],[11,"from_yaml","","TODO: Needs documentation!",33,{"inputs":[{"name":"configmeta"},{"name":"yaml"}],"output":{"name":"result"}}],[11,"to_yaml","","TODO: Needs documentation!",33,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"yaml"}}],[11,"set_meta","","TODO: Needs documentation!",33,{"inputs":[{"name":"self"},{"name":"configmeta"}],"output":null}],[11,"meta","","TODO: Needs documentation!",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"write_file","","TODO: Needs documentation!",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_dimensions","","Returns the window's dimensions in pixels.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"render_world","","Render all `Entity`s with `Renderable` components in `World`.",34,{"inputs":[{"name":"self"},{"name":"world"},{"name":"pipeline"}],"output":null}],[11,"poll_events","","Poll events from `GfxDevice`.",34,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"gfx_types","","Graphics API resources that select their implementations at compile time.",null,null],[6,"Window","amethyst::gfx_device::gfx_types","An application window.",null,null],[6,"Resources","","A handle to a GPU resource, e.g. a buffer, shader, texture, etc.",null,null],[6,"CommandBuffer","","A sequence of GPU commands.",null,null],[6,"Factory","","Creates new GPU resources.",null,null],[6,"Device","","Handles drawing output.",null,null],[11,"new","amethyst","Creates a new Application with the given initial game state, planner, and display configuration.",36,{"inputs":[{"name":"t"},{"name":"planner"},{"name":"displayconfig"}],"output":{"name":"application"}}],[11,"build","","Builds a new application using builder pattern.",36,{"inputs":[{"name":"t"},{"name":"displayconfig"}],"output":{"name":"applicationbuilder"}}],[11,"run","","Starts the application and manages the game loop.",36,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new ApplicationBuilder with the given initial game state and display configuration.",37,{"inputs":[{"name":"t"},{"name":"displayconfig"}],"output":{"name":"applicationbuilder"}}],[11,"register","","Registers a given component type.",37,{"inputs":[{"name":"self"}],"output":{"name":"applicationbuilder"}}],[11,"with","","Adds a given system `pro`, assigns it the string identifier `name`, and marks it with the runtime priority `pri`.",37,{"inputs":[{"name":"self"},{"name":"s"},{"name":"str"},{"name":"priority"}],"output":{"name":"applicationbuilder"}}],[11,"done","","Builds the Application and returns the result.",37,{"inputs":[{"name":"self"}],"output":{"name":"application"}}],[11,"new","","Creates a new window event from the given Glutin event.",7,{"inputs":[{"name":"event"}],"output":{"name":"windowevent"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"deref_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"new","","Creates a new state machine with the given initial state.",38,{"inputs":[{"name":"t"}],"output":{"name":"statemachine"}}],[11,"is_running","","Checks whether the state machine is running.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"start","","Initializes the state machine.",38,{"inputs":[{"name":"self"},{"name":"world"},{"name":"assetmanager"},{"name":"pipeline"}],"output":null}],[11,"handle_events","","Passes a vector of events to the active state to handle.",38,null],[11,"fixed_update","","Updates the currently active state at a steady, fixed interval.",38,{"inputs":[{"name":"self"},{"name":"world"},{"name":"assetmanager"},{"name":"pipeline"}],"output":null}],[11,"update","","Updates the currently active state immediately.",38,{"inputs":[{"name":"self"},{"name":"world"},{"name":"assetmanager"},{"name":"pipeline"}],"output":null}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"stopwatch"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"stopwatch"}],"output":{"name":"bool"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"stopwatch"}}],[11,"new","","Creates a new stopwatch.",9,{"inputs":[],"output":{"name":"stopwatch"}}],[11,"elapsed","","Retrieves the elapsed time.",9,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"restart","","Stops, resets, and starts the stopwatch again.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"start","","Starts, or resumes, measuring elapsed time. If the stopwatch has been started and stopped before, the new results are compounded onto the existing elapsed time value.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"stop","","Stops measuring elapsed time.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"reset","","Clears the current elapsed time value.",9,{"inputs":[{"name":"self"}],"output":null}],[8,"State","","A trait which defines game states that can be used by the state machine.",null,null],[11,"on_start","","Executed when the game state begins.",39,{"inputs":[{"name":"self"},{"name":"world"},{"name":"assetmanager"},{"name":"pipeline"}],"output":null}],[11,"on_stop","","Executed when the game state exits.",39,{"inputs":[{"name":"self"},{"name":"world"},{"name":"assetmanager"},{"name":"pipeline"}],"output":null}],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",39,{"inputs":[{"name":"self"},{"name":"world"},{"name":"assetmanager"},{"name":"pipeline"}],"output":null}],[11,"on_resume","","Executed when the application returns to this game state once again.",39,{"inputs":[{"name":"self"},{"name":"world"},{"name":"assetmanager"},{"name":"pipeline"}],"output":null}],[11,"handle_events","","Executed on every frame before updating, for use in reacting to events.",39,null],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",39,{"inputs":[{"name":"self"},{"name":"world"},{"name":"assetmanager"},{"name":"pipeline"}],"output":{"name":"trans"}}],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",39,{"inputs":[{"name":"self"},{"name":"world"},{"name":"assetmanager"},{"name":"pipeline"}],"output":{"name":"trans"}}],[11,"hash","","",4,null],[11,"hash","","",1,null],[11,"hash","","",5,null],[11,"hash","","",2,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"touchphase"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"touch"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"elementstate"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"mousescrolldelta"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"virtualkeycode"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"on_start","","Executed when the game state begins.",39,{"inputs":[{"name":"self"},{"name":"world"},{"name":"assetmanager"},{"name":"pipeline"}],"output":null}],[11,"on_stop","","Executed when the game state exits.",39,{"inputs":[{"name":"self"},{"name":"world"},{"name":"assetmanager"},{"name":"pipeline"}],"output":null}],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",39,{"inputs":[{"name":"self"},{"name":"world"},{"name":"assetmanager"},{"name":"pipeline"}],"output":null}],[11,"on_resume","","Executed when the application returns to this game state once again.",39,{"inputs":[{"name":"self"},{"name":"world"},{"name":"assetmanager"},{"name":"pipeline"}],"output":null}],[11,"handle_events","","Executed on every frame before updating, for use in reacting to events.",39,null],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second by default).",39,{"inputs":[{"name":"self"},{"name":"world"},{"name":"assetmanager"},{"name":"pipeline"}],"output":{"name":"trans"}}],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",39,{"inputs":[{"name":"self"},{"name":"world"},{"name":"assetmanager"},{"name":"pipeline"}],"output":{"name":"trans"}}]],"paths":[[4,"Event"],[4,"ElementState"],[4,"VirtualKeyCode"],[4,"MouseScrollDelta"],[4,"TouchPhase"],[4,"MouseButton"],[3,"Touch"],[3,"WindowEvent"],[4,"Trans"],[4,"Stopwatch"],[3,"Asset"],[3,"Assets"],[3,"AssetManager"],[3,"DirectoryStore"],[8,"AssetLoaderRaw"],[8,"AssetLoader"],[8,"AssetStore"],[8,"AssetReadStorage"],[3,"Mesh"],[3,"Renderable"],[3,"TextureLoadData"],[3,"InnerTransform"],[3,"Transform"],[3,"Child"],[3,"Init"],[3,"LocalTransform"],[3,"Camera"],[3,"ScreenDimensions"],[3,"Time"],[4,"Projection"],[3,"InputHandler"],[3,"Broadcaster"],[3,"TransformSystem"],[3,"DisplayConfig"],[3,"GfxDevice"],[3,"MainTarget"],[3,"Application"],[3,"ApplicationBuilder"],[3,"StateMachine"],[8,"State"]]};
searchIndex["amethyst_config"] = {"doc":"Loads YAML configuration files (.yaml/.yml) into a structure for easy usage.","items":[[4,"Yaml","amethyst_config","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to access your YAML document.",null,null],[13,"Real","","Float types are stored as String and parsed on demand. Note that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",0,null],[13,"Integer","","YAML int is stored as i64.",0,null],[13,"String","","YAML scalar.",0,null],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",0,null],[13,"Array","","YAML array, can be accessed as a `Vec`.",0,null],[13,"Hash","","YAML hash, can be accessed as a `BTreeMap`.",0,null],[13,"Alias","","Alias, not fully supported yet.",0,null],[13,"Null","","YAML null, e.g. `null` or `~`.",0,null],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This simplifies error handling in the calling code. Invalid type conversion also returns `BadValue`.",0,null],[3,"ConfigMeta","","Metadata for a configuration structure",null,null],[12,"path","","Where the file is located, defaults to \"config/config.yml\"",1,null],[12,"fields","","List from top-level to bottom-level configs",1,null],[12,"parent","","Parent meta",1,null],[12,"ty","","String representation of the type",1,null],[12,"name","","Name of the field",1,null],[12,"bad_value","","Whether key is bad or not",1,null],[12,"options","","Options to display to user, usually used for enums",1,null],[3,"DisplayConfig","","",null,null],[12,"title","","",2,null],[12,"brightness","","",2,null],[12,"fullscreen","","",2,null],[12,"dimensions","","",2,null],[12,"min_dimensions","","",2,null],[12,"max_dimensions","","",2,null],[12,"vsync","","",2,null],[12,"multisampling","","",2,null],[12,"visibility","","",2,null],[3,"LoggingConfig","","",null,null],[12,"file_path","","",3,null],[12,"output_level","","",3,null],[12,"logging_level","","",3,null],[3,"Config","","",null,null],[12,"display","","Configuration for display and graphics",4,null],[12,"logging","","Configuration for output",4,null],[4,"ConfigError","","Configuration error",null,null],[13,"YamlScan","","",5,null],[13,"YamlParse","","",5,null],[13,"NonConfig","","",5,null],[13,"FileError","","",5,null],[13,"MultipleExternalFiles","","",5,null],[13,"MissingExternalFile","","",5,null],[5,"to_string","","Converts a Yaml object into a .yml/.yaml format",null,{"inputs":[{"name":"yaml"}],"output":{"name":"string"}}],[11,"to_string","","",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"configmeta"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"tree","","Displays the meta's fields in order e.g. Config->nested_config->field",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"root","","Returns the highest level parent or the root meta of the configuration",1,{"inputs":[{"name":"self"}],"output":{"name":"configmeta"}}],[8,"Element","","Trait for fields inside of a configuration struct.",null,null],[10,"from_yaml","","Convert yaml element into a rust type, Raises an error if it is not the yaml element expected",6,{"inputs":[{"name":"configmeta"},{"name":"yaml"}],"output":{"name":"result"}}],[10,"to_yaml","","Converts rust type into a yaml element for writing Requires the path for external configs",6,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"yaml"}}],[11,"set_meta","","Sets the meta data of a config structure, only works on config structures",6,{"inputs":[{"name":"self"},{"name":"configmeta"}],"output":null}],[11,"meta","","Returns meta data if it is a config structure",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_string","","From some string (should be used for top level elements if you want to embed the code)",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_raw","","From a file relative to current config",6,{"inputs":[{"name":"configmeta"},{"name":"p"}],"output":{"name":"result"}}],[11,"from_file","","From a file relative to project",6,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"write_file","","Recursively writes to files given the configuration's current context.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"displayconfig"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","TODO: Needs documentation!",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"from_yaml","","TODO: Needs documentation!",2,{"inputs":[{"name":"configmeta"},{"name":"yaml"}],"output":{"name":"result"}}],[11,"to_yaml","","TODO: Needs documentation!",2,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"yaml"}}],[11,"set_meta","","TODO: Needs documentation!",2,{"inputs":[{"name":"self"},{"name":"configmeta"}],"output":null}],[11,"meta","","TODO: Needs documentation!",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"write_file","","TODO: Needs documentation!",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"loggingconfig"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","TODO: Needs documentation!",3,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"from_yaml","","TODO: Needs documentation!",3,{"inputs":[{"name":"configmeta"},{"name":"yaml"}],"output":{"name":"result"}}],[11,"to_yaml","","TODO: Needs documentation!",3,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"yaml"}}],[11,"set_meta","","TODO: Needs documentation!",3,{"inputs":[{"name":"self"},{"name":"configmeta"}],"output":null}],[11,"meta","","TODO: Needs documentation!",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"write_file","","TODO: Needs documentation!",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","TODO: Needs documentation!",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"from_yaml","","TODO: Needs documentation!",4,{"inputs":[{"name":"configmeta"},{"name":"yaml"}],"output":{"name":"result"}}],[11,"to_yaml","","TODO: Needs documentation!",4,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"yaml"}}],[11,"set_meta","","TODO: Needs documentation!",4,{"inputs":[{"name":"self"},{"name":"configmeta"}],"output":null}],[11,"meta","","TODO: Needs documentation!",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"write_file","","TODO: Needs documentation!",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[14,"config","","Automatically generates a struct/enums for loading in yaml files.",null,null],[11,"as_bool","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_i64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_str","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_hash","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_vec","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_bool","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_i64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_string","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_hash","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_vec","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_badvalue","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_f64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_f64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"yaml"}}],[11,"hash","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","","",0,null],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"yaml"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"yaml"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"ordering"}}],[11,"set_meta","","Sets the meta data of a config structure, only works on config structures",6,{"inputs":[{"name":"self"},{"name":"configmeta"}],"output":null}],[11,"meta","","Returns meta data if it is a config structure",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_string","","From some string (should be used for top level elements if you want to embed the code)",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_raw","","From a file relative to current config",6,{"inputs":[{"name":"configmeta"},{"name":"p"}],"output":{"name":"result"}}],[11,"from_file","","From a file relative to project",6,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"write_file","","Recursively writes to files given the configuration's current context.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[4,"Yaml"],[3,"ConfigMeta"],[3,"DisplayConfig"],[3,"LoggingConfig"],[3,"Config"],[4,"ConfigError"],[8,"Element"]]};
searchIndex["amethyst_renderer"] = {"doc":"High-level rendering engine with multiple backends.","items":[[3,"Renderer","amethyst_renderer","Manages passes and the execution of the passes over the targets. It only contains the passes, all other data is contained in the `Frame`.",null,null],[3,"VertexPosNormal","","",null,null],[12,"pos","","",0,null],[12,"normal","","",0,null],[12,"tex_coord","","",0,null],[3,"ConstantColorTexture","","Tiny 1x1 texture that can be used to store constant colors.",null,null],[3,"Fragment","","The most basic drawable element.",null,null],[12,"transform","","The transform matrix to apply to the matrix. This is sometimes referred to as the model matrix. FIXME: Wording needs clarification.",1,null],[12,"buffer","","Vertex buffer associated with this fragment.",1,null],[12,"slice","","A slice of the vertex buffer above.",1,null],[12,"ka","","The ambient color.",1,null],[12,"kd","","The diffuse color.",1,null],[12,"ks","","The specular color.",1,null],[12,"ns","","The pecular exponent.",1,null],[3,"PointLight","","A point light source.",null,null],[12,"center","","Coordinates of the light source in three dimensional space.",2,null],[12,"color","","Color of the light.",2,null],[12,"intensity","","Brightness of the light source.",2,null],[12,"radius","","Maximum radius of the point light's affected area.",2,null],[12,"smoothness","","Smoothness of the light-to-dark transition from the center to the radius.",2,null],[3,"DirectionalLight","","A directional light source.",null,null],[12,"color","","Color of the light.",3,null],[12,"direction","","Direction that the light is pointing.",3,null],[3,"AmbientLight","","An ambient light source.",null,null],[12,"power","","Intensity of the light.",4,null],[3,"Scene","","Collection of fragments and lights that make up the scene.",null,null],[12,"fragments","","List of renderable fragments.",5,null],[12,"point_lights","","List of point lights.",5,null],[12,"directional_lights","","List of directional lights.",5,null],[12,"ambient_light","","Ambient light factor.",5,null],[12,"camera","","A camera used to render this scene",5,null],[3,"Camera","","Contains the graphical transforms for a camera.",null,null],[12,"proj","","Graphical projection matrix.",6,null],[12,"view","","The view matrix.",6,null],[3,"Layer","","A stackable image layer.",null,null],[12,"target","","Name of the render target to draw on.",7,null],[12,"passes","","Sequence of passes to execute over the render target.",7,null],[3,"Pipeline","","The render job submission Describes the layers and",null,null],[12,"layers","","the layers to be processed",8,null],[12,"targets","","collection of render targets. A target may be a source or a sink for a `Pass`",8,null],[4,"Texture","","A renderable texture resource.",null,null],[13,"Constant","","A texture with one constant RGBA color value.",9,null],[13,"Texture","","Handle to a slice of texture memory.",9,null],[0,"pass","","",null,null],[3,"Clear","amethyst_renderer::pass","Clear the frame buffer",null,null],[12,"color","","the color to clear with",10,null],[3,"Wireframe","","Render the scene as a wireframe",null,null],[12,"camera","","The Camera to use",11,null],[12,"scene","","The scene to use",11,null],[3,"DrawFlat","","Render into the target without any shading applied",null,null],[12,"camera","","The Camera to use",12,null],[12,"scene","","The scene to use",12,null],[3,"DepthPass","","Render only the depth layer leaving all other Gbuffer layers unchanged",null,null],[12,"camera","","The Camera to use",13,null],[12,"scene","","The scene to use",13,null],[3,"DrawShaded","","Render into the target without a standard ambient/diffuse shading",null,null],[12,"camera","","The Camera to use",14,null],[12,"scene","","The scene to use",14,null],[3,"BlitLayer","","Blit a layer of the gbuffer into the target",null,null],[12,"gbuffer","","the gbuffer to blit from",15,null],[12,"layer","","the layer of the buffer to blit from one of ka, kd or normal",15,null],[3,"Lighting","","Do a lighting pass",null,null],[12,"camera","","The Camera to use",16,null],[12,"gbuffer","","The gbuffer to source the data",16,null],[12,"scene","","the scene to get the lights from",16,null],[0,"forward","","",null,null],[3,"PointLight","amethyst_renderer::pass::forward","",null,null],[12,"center","","",17,null],[12,"color","","",17,null],[12,"intensity","","",17,null],[12,"radius","","",17,null],[12,"smoothness","","",17,null],[12,"_pad","","",17,null],[3,"DirectionalLight","","",null,null],[12,"color","","",18,null],[12,"direction","","",18,null],[3,"VertexArgs","","",null,null],[12,"proj","","",19,null],[12,"view","","",19,null],[12,"model","","",19,null],[3,"FragmentArgs","","",null,null],[12,"point_light_count","","",20,null],[12,"directional_light_count","","",20,null],[3,"Clear","","Handles clearing the screen",null,null],[3,"DrawFlat","","Handles rendering fragments with no shading",null,null],[3,"DrawShaded","","Handles rendering fragments with shading",null,null],[3,"Wireframe","","Handles rendering fragments as wireframe objects",null,null],[0,"flat","","",null,null],[3,"Data","amethyst_renderer::pass::forward::flat","",null,null],[12,"vbuf","","",21,null],[12,"vertex_args","","",21,null],[12,"fragment_args","","",21,null],[12,"out_ka","","",21,null],[12,"out_depth","","",21,null],[12,"ka","","",21,null],[12,"kd","","",21,null],[3,"Meta","","",null,null],[3,"Init","","",null,null],[12,"vbuf","","",22,null],[12,"vertex_args","","",22,null],[12,"fragment_args","","",22,null],[12,"out_ka","","",22,null],[12,"out_depth","","",22,null],[12,"ka","","",22,null],[12,"kd","","",22,null],[5,"new","","",null,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"link_to","","",22,{"inputs":[{"name":"self"},{"name":"descriptor"},{"name":"programinfo"}],"output":{"name":"result"}}],[11,"bake_to","","",21,null],[0,"shaded","amethyst_renderer::pass::forward","",null,null],[3,"Data","amethyst_renderer::pass::forward::shaded","",null,null],[12,"vbuf","","",23,null],[12,"vertex_args","","",23,null],[12,"fragment_args","","",23,null],[12,"point_lights","","",23,null],[12,"dir_lights","","",23,null],[12,"out_ka","","",23,null],[12,"out_depth","","",23,null],[12,"ka","","",23,null],[12,"kd","","",23,null],[12,"ks","","",23,null],[12,"ns","","",23,null],[12,"ambient","","",23,null],[3,"Meta","","",null,null],[3,"Init","","",null,null],[12,"vbuf","","",24,null],[12,"vertex_args","","",24,null],[12,"fragment_args","","",24,null],[12,"point_lights","","",24,null],[12,"dir_lights","","",24,null],[12,"out_ka","","",24,null],[12,"out_depth","","",24,null],[12,"ka","","",24,null],[12,"kd","","",24,null],[12,"ks","","",24,null],[12,"ns","","",24,null],[12,"ambient","","",24,null],[5,"new","","",null,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"link_to","","",24,{"inputs":[{"name":"self"},{"name":"descriptor"},{"name":"programinfo"}],"output":{"name":"result"}}],[11,"bake_to","","",23,null],[0,"wireframe","amethyst_renderer::pass::forward","",null,null],[3,"Data","amethyst_renderer::pass::forward::wireframe","",null,null],[12,"vbuf","","",25,null],[12,"vertex_args","","",25,null],[12,"out_ka","","",25,null],[12,"ka","","",25,null],[12,"kd","","",25,null],[3,"Meta","","",null,null],[3,"Init","","",null,null],[12,"vbuf","","",26,null],[12,"vertex_args","","",26,null],[12,"out_ka","","",26,null],[12,"ka","","",26,null],[12,"kd","","",26,null],[5,"new","","",null,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"link_to","","",26,{"inputs":[{"name":"self"},{"name":"descriptor"},{"name":"programinfo"}],"output":{"name":"result"}}],[11,"bake_to","","",25,null],[6,"GFormat","amethyst_renderer::pass::forward","",null,null],[7,"VERTEX_SRC","","",null,null],[7,"FLAT_FRAGMENT_SRC","","",null,null],[7,"FRAGMENT_SRC","","",null,null],[7,"WIREFRAME_GEOMETRY_SRC","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"pointlight"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"query","","",17,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"directionallight"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"query","","",18,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"vertexargs"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"query","","",19,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"fragmentargs"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"query","","",20,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"apply","","",27,{"inputs":[{"name":"self"},{"name":"clear"},{"name":"colorbuffer"},{"name":"pipeline"},{"name":"scene"},{"name":"encoder"}],"output":null}],[11,"new","","",28,{"inputs":[{"name":"f"}],"output":{"name":"drawflat"}}],[11,"apply","","",28,{"inputs":[{"name":"self"},{"name":"drawflat"},{"name":"colorbuffer"},{"name":"pipeline"},{"name":"scene"},{"name":"encoder"}],"output":null}],[11,"new","","",29,{"inputs":[{"name":"f"}],"output":{"name":"drawshaded"}}],[11,"apply","","",29,{"inputs":[{"name":"self"},{"name":"drawshaded"},{"name":"colorbuffer"},{"name":"pipeline"},{"name":"scene"},{"name":"encoder"}],"output":null}],[11,"new","","",30,{"inputs":[{"name":"f"}],"output":{"name":"wireframe"}}],[11,"apply","","",30,{"inputs":[{"name":"self"},{"name":"wireframe"},{"name":"colorbuffer"},{"name":"pipeline"},{"name":"scene"},{"name":"encoder"}],"output":null}],[0,"deferred","amethyst_renderer::pass","",null,null],[3,"Vertex","amethyst_renderer::pass::deferred","",null,null],[12,"pos","","",31,null],[12,"tex_coord","","",31,null],[3,"Clear","","",null,null],[3,"PointLight","","",null,null],[12,"center","","",32,null],[12,"color","","",32,null],[12,"intensity","","",32,null],[12,"radius","","",32,null],[12,"smoothness","","",32,null],[12,"_pad","","",32,null],[3,"DirectionalLight","","",null,null],[12,"color","","",33,null],[12,"direction","","",33,null],[3,"FragmentLightArgs","","",null,null],[12,"proj","","",34,null],[12,"inv_view_proj","","",34,null],[12,"viewport","","",34,null],[12,"point_light_count","","",34,null],[12,"directional_light_count","","",34,null],[3,"VertexArgs","","",null,null],[12,"proj","","",35,null],[12,"view","","",35,null],[12,"model","","",35,null],[3,"FragmentArgs","","",null,null],[12,"ka","","",36,null],[12,"kd","","",36,null],[12,"ks","","",36,null],[3,"DrawPass","","",null,null],[3,"DepthPass","","",null,null],[3,"BlitLayer","","",null,null],[3,"LightingPass","","",null,null],[0,"light","","",null,null],[3,"Data","amethyst_renderer::pass::deferred::light","",null,null],[12,"vbuf","","",37,null],[12,"ka","","",37,null],[12,"kd","","",37,null],[12,"ks","","",37,null],[12,"ns","","",37,null],[12,"ambient","","",37,null],[12,"normal","","",37,null],[12,"depth","","",37,null],[12,"out","","",37,null],[12,"point_lights","","",37,null],[12,"directional_lights","","",37,null],[12,"fragment_args","","",37,null],[3,"Meta","","",null,null],[3,"Init","","",null,null],[12,"vbuf","","",38,null],[12,"ka","","",38,null],[12,"kd","","",38,null],[12,"ks","","",38,null],[12,"ns","","",38,null],[12,"ambient","","",38,null],[12,"normal","","",38,null],[12,"depth","","",38,null],[12,"out","","",38,null],[12,"point_lights","","",38,null],[12,"directional_lights","","",38,null],[12,"fragment_args","","",38,null],[5,"new","","",null,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"link_to","","",38,{"inputs":[{"name":"self"},{"name":"descriptor"},{"name":"programinfo"}],"output":{"name":"result"}}],[11,"bake_to","","",37,null],[0,"draw","amethyst_renderer::pass::deferred","",null,null],[3,"Data","amethyst_renderer::pass::deferred::draw","",null,null],[12,"ka","","",39,null],[12,"kd","","",39,null],[12,"ks","","",39,null],[12,"vbuf","","",39,null],[12,"vertex_args","","",39,null],[12,"fragment_args","","",39,null],[12,"out_normal","","",39,null],[12,"out_ka","","",39,null],[12,"out_kd","","",39,null],[12,"out_ks","","",39,null],[12,"out_depth","","",39,null],[3,"Meta","","",null,null],[3,"Init","","",null,null],[12,"ka","","",40,null],[12,"kd","","",40,null],[12,"ks","","",40,null],[12,"vbuf","","",40,null],[12,"vertex_args","","",40,null],[12,"fragment_args","","",40,null],[12,"out_normal","","",40,null],[12,"out_ka","","",40,null],[12,"out_kd","","",40,null],[12,"out_ks","","",40,null],[12,"out_depth","","",40,null],[5,"new","","",null,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"link_to","","",40,{"inputs":[{"name":"self"},{"name":"descriptor"},{"name":"programinfo"}],"output":{"name":"result"}}],[11,"bake_to","","",39,null],[0,"depth","amethyst_renderer::pass::deferred","",null,null],[3,"Data","amethyst_renderer::pass::deferred::depth","",null,null],[12,"vbuf","","",41,null],[12,"vertex_args","","",41,null],[12,"out_depth","","",41,null],[3,"Meta","","",null,null],[3,"Init","","",null,null],[12,"vbuf","","",42,null],[12,"vertex_args","","",42,null],[12,"out_depth","","",42,null],[5,"new","","",null,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"link_to","","",42,{"inputs":[{"name":"self"},{"name":"descriptor"},{"name":"programinfo"}],"output":{"name":"result"}}],[11,"bake_to","","",41,null],[0,"blit","amethyst_renderer::pass::deferred","",null,null],[3,"Data","amethyst_renderer::pass::deferred::blit","",null,null],[12,"vbuf","","",43,null],[12,"source","","",43,null],[12,"out","","",43,null],[3,"Meta","","",null,null],[3,"Init","","",null,null],[12,"vbuf","","",44,null],[12,"source","","",44,null],[12,"out","","",44,null],[5,"new","","",null,{"inputs":[],"output":{"name":"init"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"data"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"link_to","","",44,{"inputs":[{"name":"self"},{"name":"descriptor"},{"name":"programinfo"}],"output":{"name":"result"}}],[11,"bake_to","","",43,null],[7,"DRAW_VERTEX_SRC","amethyst_renderer::pass::deferred","",null,null],[7,"DRAW_FRAGMENT_SRC","","",null,null],[7,"DEPTH_VERTEX_SRC","","",null,null],[7,"DEPTH_FRAGMENT_SRC","","",null,null],[7,"LIGHT_FRAGMENT_SRC","","",null,null],[7,"BLIT_VERTEX_SRC","","",null,null],[7,"BLIT_FRAGMENT_SRC","","",null,null],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vertex"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"query","","",31,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"apply","","",45,{"inputs":[{"name":"self"},{"name":"clear"},{"name":"geometrybuffer"},{"name":"pipeline"},{"name":"scene"},{"name":"encoder"}],"output":null}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"pointlight"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"query","","",32,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"directionallight"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"query","","",33,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"fragmentlightargs"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"query","","",34,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"vertexargs"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"query","","",35,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"fragmentargs"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"query","","",36,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"new","","",46,{"inputs":[{"name":"f"}],"output":{"name":"drawpass"}}],[11,"apply","","",46,{"inputs":[{"name":"self"},{"name":"drawflat"},{"name":"geometrybuffer"},{"name":"pipeline"},{"name":"scene"},{"name":"encoder"}],"output":null}],[11,"new","","",47,{"inputs":[{"name":"f"}],"output":{"name":"depthpass"}}],[11,"apply","","",47,{"inputs":[{"name":"self"},{"name":"depthpass"},{"name":"geometrybuffer"},{"name":"pipeline"},{"name":"scene"},{"name":"encoder"}],"output":null}],[11,"new","","",48,{"inputs":[{"name":"f"}],"output":{"name":"blitlayer"}}],[11,"apply","","",48,{"inputs":[{"name":"self"},{"name":"blitlayer"},{"name":"colorbuffer"},{"name":"pipeline"},{"name":"scene"},{"name":"encoder"}],"output":null}],[11,"new","","",49,{"inputs":[{"name":"f"}],"output":{"name":"lightingpass"}}],[11,"apply","","",49,{"inputs":[{"name":"self"},{"name":"lighting"},{"name":"colorbuffer"},{"name":"pipeline"},{"name":"scene"},{"name":"encoder"}],"output":null}],[8,"Pass","amethyst_renderer::pass","A `Pass` is an implementation of a Pass",null,null],[16,"Arg","","The argument required for the Pass",50,null],[16,"Target","","The render Target",50,null],[10,"apply","","encode the pass into the encoder using the supplied argument frame and render target",50,null],[8,"PassDescription","","Describes a render pass",null,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"clear"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new boxed Clear Description",10,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"wireframe"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a boxed Description of the Writeframe",11,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"box"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"drawflat"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a Boxed DrawFlat",12,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"box"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"depthpass"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a Boxed DepthPass",13,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"box"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"drawshaded"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a Boxed DrawShaded",14,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"box"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"blitlayer"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a boxed BlitLayer",15,{"inputs":[{"name":"a"},{"name":"b"}],"output":{"name":"box"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"lighting"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Box the Lighting Pass",16,{"inputs":[{"name":"a"},{"name":"b"},{"name":"c"}],"output":{"name":"box"}}],[11,"is","","Returns true if the boxed type is the same as `T`",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_ref_unchecked","","Returns a reference to the boxed value, blindly assuming it to be of type `T`. If you are not *absolutely certain* of `T`, you *must not* call this.",51,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut_unchecked","","Returns a mutable reference to the boxed value, blindly assuming it to be of type `T`. If you are not *absolutely certain* of `T`, you *must not* call this.",51,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Returns the boxed value if it is of type `T`, or `Err(Self)` if it isn't.",51,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast_unchecked","","Returns the boxed value, blindly assuming it to be of type `T`. If you are not *absolutely certain* of `T`, you *must not* call this.",51,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[0,"target","amethyst_renderer","",null,null],[3,"ColorBuffer","amethyst_renderer::target","A simple output containing both a Color and a Depth target",null,null],[12,"color","","The color render target",52,null],[12,"output_depth","","The depth buffer",52,null],[3,"GeometryBuffer","","A geometry buffer that is used in a deferred pipeline. TODO: Why both `ka` and `texture_ka`, etc?",null,null],[12,"normal","","Contains the Normals as a f32x4",53,null],[12,"ka","","Contains the ambient color",53,null],[12,"kd","","Contains the diffuse color",53,null],[12,"ks","","Contains the specular color",53,null],[12,"depth","","Contains the depth buffer",53,null],[12,"texture_normal","","The normal buffer as a texture",53,null],[12,"texture_ka","","The ambient color as texture",53,null],[12,"texture_kd","","The diffuse color as a texture",53,null],[12,"texture_ks","","The specular color as a texture",53,null],[12,"texture_depth","","The depth buffer as a texture",53,null],[6,"ColorFormat","","Placeholder Color format",null,null],[6,"DepthFormat","","Placeholder Depth Format",null,null],[8,"Target","","A Target or a RenderTarget is any object that can be the target of a Layer This is normally a framebuffer",null,null],[11,"is","","Returns true if the boxed type is the same as `T`",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_ref_unchecked","","Returns a reference to the boxed value, blindly assuming it to be of type `T`. If you are not *absolutely certain* of `T`, you *must not* call this.",54,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut_unchecked","","Returns a mutable reference to the boxed value, blindly assuming it to be of type `T`. If you are not *absolutely certain* of `T`, you *must not* call this.",54,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Returns the boxed value if it is of type `T`, or `Err(Self)` if it isn't.",54,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast_unchecked","","Returns the boxed value, blindly assuming it to be of type `T`. If you are not *absolutely certain* of `T`, you *must not* call this.",54,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"new","","Create a new GeometryBuffer with the supplied factory the buffer will be allocated to the supplied width and height",53,null],[11,"clone","amethyst_renderer","",0,{"inputs":[{"name":"self"}],"output":{"name":"vertexposnormal"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"query","","",0,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"new","","Creates a new renderer with the given command buffer.",55,{"inputs":[{"name":"c"}],"output":{"name":"renderer"}}],[11,"load_all","","Load all known passes into the renderer.",55,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"add_pass","","Add a pass to the table of available passes.",55,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"submit","","Execute all passes and draw the frame.",55,{"inputs":[{"name":"self"},{"name":"pipeline"},{"name":"scene"},{"name":"d"}],"output":null}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"constantcolortexture"}}],[11,"new","","Create a new `ConstantColorTexture` from the given factory.",56,{"inputs":[{"name":"f"}],"output":{"name":"constantcolortexture"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"texture"}}],[11,"to_view","","Takes the given constant color texture and, using the encoder, returns a slice of texture memory.",9,{"inputs":[{"name":"self"},{"name":"constantcolortexture"},{"name":"encoder"}],"output":{"name":"shaderresourceview"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"fragment"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"pointlight"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"pointlight"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"directionallight"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"directionallight"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"ambientlight"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"ambientlight"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"scene"}}],[11,"new","","Creates an empty scene with the given camera.",5,{"inputs":[{"name":"camera"}],"output":{"name":"scene"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"camera"}}],[11,"new","","Creates a new camera with the given projection and view matrices.",6,null],[11,"perspective","","Returns a realistic perspective projection matrix.",6,null],[11,"orthographic","","Returns an orthographic projection matrix..",6,null],[11,"look_at","","Returns a 4x4 view matrix.",6,null],[11,"new","","Creates a new layer with the given list of passes and the name of the render target",7,{"inputs":[{"name":"t"},{"name":"vec"}],"output":{"name":"layer"}}],[11,"new","","Create an empty Pipeline",8,{"inputs":[],"output":{"name":"pipeline"}}]],"paths":[[3,"VertexPosNormal"],[3,"Fragment"],[3,"PointLight"],[3,"DirectionalLight"],[3,"AmbientLight"],[3,"Scene"],[3,"Camera"],[3,"Layer"],[3,"Pipeline"],[4,"Texture"],[3,"Clear"],[3,"Wireframe"],[3,"DrawFlat"],[3,"DepthPass"],[3,"DrawShaded"],[3,"BlitLayer"],[3,"Lighting"],[3,"PointLight"],[3,"DirectionalLight"],[3,"VertexArgs"],[3,"FragmentArgs"],[3,"Data"],[3,"Init"],[3,"Data"],[3,"Init"],[3,"Data"],[3,"Init"],[3,"Clear"],[3,"DrawFlat"],[3,"DrawShaded"],[3,"Wireframe"],[3,"Vertex"],[3,"PointLight"],[3,"DirectionalLight"],[3,"FragmentLightArgs"],[3,"VertexArgs"],[3,"FragmentArgs"],[3,"Data"],[3,"Init"],[3,"Data"],[3,"Init"],[3,"Data"],[3,"Init"],[3,"Data"],[3,"Init"],[3,"Clear"],[3,"DrawPass"],[3,"DepthPass"],[3,"BlitLayer"],[3,"LightingPass"],[8,"Pass"],[8,"PassDescription"],[3,"ColorBuffer"],[3,"GeometryBuffer"],[8,"Target"],[3,"Renderer"],[3,"ConstantColorTexture"]]};
initSearch(searchIndex);
